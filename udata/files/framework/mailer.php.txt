<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
/**
 * The application mailer.
 * 
 * The application mailer uses PHPMailer as it's background 
 * worker.
 * @uses https://github.com/PHPMailer/PHPMailer
 * @author Paul W. Lane
 * @see etc/config.php
 */
#PHPMailer is used by UData
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require_once(PHPMAILER_DIR.'/Exception.php');
require_once(PHPMAILER_DIR.'/OAuth.php');
require_once(PHPMAILER_DIR.'/POP3.php');
require_once(PHPMAILER_DIR.'/SMTP.php');
require_once(PHPMAILER_DIR.'/PHPMailer.php');

/**
 * The mailer, requires PHPMailer
 * 
 * This class is instantiated by the Instance server.
 * It can be used stand alone if needed, but should be
 * used through the Instance server for this application.
 * @see Instance::$mailer
 * @package UData
 * @author Paul W. Lane
 * @link https://github.com/PHPMailer/PHPMailer
 */
Class Mailer {

    /**
     * @var Array $config The application configuraion array
     */
    protected $config;
    /**
     * @var PHPMailer $mailer The background mailer worker instance
     */
    protected $mailer;
    
    /**
     * Class constructor
     * @param Array $config The application configuration array
     * @return Mailer
     */
    public function __construct ($config) {
        $this->config = $config;
        $this->mailer = new PHPMailer(true);
        try {
            switch($this->config['mailer-type']) {
                case 'SMTP': $this->mailer->isSMTP(); break;
                case 'Mail': $this->mailer->isMail(); break;
                case 'Sendmail': $this->mailer->isSendmail(); break;
                default: $this->mailer->isSMTP();
            }
            if ($this->config['mailer-SMTPAuth']) {
                $this->mailer->SMTPAuth = true;
                $this->mailer->Username = $this->config['mailer-username'];
                $this->mailer->Password = $this->config['mailer-password'];
                $this->mailer->SMTPSecure = $this->config['mailer-security'];
            }
            $this->mailer->Host = $this->config['mailer-host'];
            $this->mailer->Port = $this->config['mailer-port'];
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Sends mail using given information in an array
     * 
     * This method is used to send mail. All the details 
     * of the mail being sent should be given in the array.
     * The form of the array is: 
     * `['to'=>'to_address','subject'=>'mail_subject','body'=>'message_body','attache=>['attach_filepath',...]]`
     * It is not possible to send mail as anyone other than the server with this method.
     * 
     * @param Array $mail The mail array describing the mail to send.
     */
    public function sendMail (Array $mail) {
        try {
            $this->mailer->addAddress($mail['to']);
            $this->mailer->setFrom($this->config['mailer-default-from-addr'], $this->config['mailer-default-from-name']);
            $this->mailer->Subject = $mail['subject'];
            $this->mailer->msgHTML($mail['body'], INCLUDE_ROOT.'/wwwroot/images');
            if (!empty($mail['attach'])) {
                foreach($mail['attach'] as $file) {
                    $this->mailer->addAttachment($file);
                }
            }
            return $this->mailer->send();            
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_WARNING);
            return false;
        }
        catch (\Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }


}
