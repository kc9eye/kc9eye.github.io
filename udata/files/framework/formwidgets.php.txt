<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
/**
 * Form widgets, for easily creating forms with PHP instead of HTML
 * 
 * This class contains methods for creating standard framework styled
 * horizontal forms with simple PHP calls. Includes a validation model, utilizing 
 * the jquery.validate() plugin.
 * @author Paul W. Lane
 * @example ../safety/addsds.php Of form widget use in a controller
 * @link https://jqueryvalidation.org/documentation/
 * @package UData
 */
Class FormWidgets {
    
    /**
     * @var String $formid The forms ID atrribute, auto generated if not given in newForm()
     */
    public $formid;

    /**
     * @var String $scripts The base file path to script files called
     */
    public $scripts;

    /**
     * @var Boolean $validate Whether the jquery.validate() plugin is required
     */
    protected $validate;

    /**
     * @var Array $rules Array eventually encoded to JSON for the jquery.validate() plugin
     */
    protected $rules;

    /**
     * Class constructor
     * 
     * @param String $scripts The base filepath to any called scripts, including the jquery.validate() plugin
     */
    public function __construct ($scripts) {
        $this->validate = false;
        $this->scripts = $scripts;
    }

    /**
     * Generates a new multipart form heading to the stream
     * 
     * Required to handle file uploads
     * @param String $header Optional string to use a header to the form
     * @param String $uri Optional link to the handler for this form
     * @param String $id Optional ID attribute. Autogenerated if not supplied
     * @return Void
     * @todo Rewrite using php instead of HTML
     */
    public function newMultipartForm ($header=null,$uri=null,$id=null) {
        if (is_null($id)) {
            $this->formid = uniqid();
        }
        else {
            $this->formid = $id;
        }
        ?>
<div style='margin:10px'>
    <?php if (!is_null($header)) {?>
    <div class='center-text center-block'><h2><?php echo $header;?></h2></div>
    <?php }?>
    <form enctype='multipart/form-data' method='post' class='form-horizontal' id='<?php echo $this->formid;?>' <?php if (!is_null($uri)){echo "action='{$uri}'";};?>>
    <?php
    }

    /**
     * Outputs a new form header to the stream
     * 
     * Required for new forms
     * @param String $header Optional header for the form
     * @param String $uri Optional URI to a handler for the form
     * @param String $method Optional method the form is returned, one of 'post' or 'get'. Post is default.
     * @param String $id Optional ID attribute. Autogenerated if not supplied
     * @return Void
     * @todo Rewrite with PHP instead fo HTML
     */
    public function newForm ($header = null, $uri = null, $method = 'post', $id = null) {
        if (is_null($id)) {
            $this->formid = uniqid();
        }
        else {
            $this->formid = $id;
        }
?>
<div style='margin:10px'>
    <?php if (!is_null($header)) {?>
    <div class='center-text center-block'><h2><?php echo $header;?></h2></div>
    <?php }?>
    <form method='<?php echo $method;?>' class='form-horizontal' id='<?php echo $this->formid;?>' <?php if (!is_null($uri)){echo "action='{$uri}'";};?>>
<?php
    }

    /**
     * Outputs the closing of the form
     * 
     * Required at the end of the form
     * @return Void
     */
    public function endForm () {
        if ($this->validate) {
            echo "</form>
                  <script src='https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/jquery.validate.min.js'></script>
                  <script src='https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/additional-methods.min.js'></script>
                  <script src='{$this->scripts}/btstrapfileinputhack.js'></script>
                  <script>
                        $(document).ready(function(){
                            $('#{$this->formid}').validate(".str_replace('"','',json_encode(['rules'=>$this->rules],JSON_FORCE_OBJECT)).");
                        });
                  </script>
            </div>";            
        }
        else {
            echo "</form></div>";
        }
    }

    /**
     * Outputs a standard styled email form entry
     * @param String $name The name the data will have in the `$_REQUEST` array
     * @param String $label Optional name used in the label for the user
     * @param String $value Optional data to prepopulate the entry with
     * @param Mixed $required Optional array of jquery.validate() properties or `true` if simply required
     * @param String $helpBlock Optional string to put in a help block for the entry
     * @return Void
     * @todo Rewrite with PHP instead of HTML
     */
    public function emailCapture ($name, $label = 'Email', $value = null, $required = false, $helpBlock = null) {
        if ($required) {
            $this->addValidation($name, $required);
        }
?>
<div class='form-group'>
    <div class='row'>
        <div class='col-md-3'><!--Desktop spacing --></div>
        <div class='col-xs-12 col-md-1 right-text'>
            <label class='control-label' for='<?php echo $name;?>'><?php echo $label;?>:</label>
        </div>
        <div class='col-xs-12 col-md-5'>
            <input type='email' class='form-control' id='<?php echo $name;?>' placeholder='<?php if ($required){echo "Required";}else{echo $label;}?>' name='<?php echo $name;?>' <?php if (!is_null($value)){echo "value='{$value}' ";} ?> />
            <?php if (!is_null($helpBlock)) {
            ?>
            <span class='help-block'>
                <?php echo $helpBlock;?>
            </span>
            <?php
            }
            ?>
        </div>
        <div class='col-md-3'><!-- This is for spacing on desktop --></div>
    </div>
</div>
<?php
    }
    
    /**
     * Outputs a standard styled password form entry
     * @param String $name The name given to `$_REQUEST` for the entry
     * @param String $label Optional label for the user of the entry
     * @param String $value Optional value to prepopulate the entry with
     * @param Mixed $required Optional `true` or array of jquery.validate() properties
     * @param String $helpBlock Optional string for user helpblock
     * @todo Rewrite with PHP instead of HTML
     */
    public function passwordCapture ($name, $label = 'Password', $value = null, $required = false, $helpBlock = null) {
        if ($required) {
            $this->addValidation($name, $required);
        }
?>
<div class='form-group'>
    <div class='row'>
        <div class='col-md-3'><!-- Desktop spacing --></div>
        <div class='col-xs-12 col-md-1 right-text'>
            <label class='control-label' for='<?php echo $name;?>'><?php echo $label;?>:</label>
        </div>
        <div class='col-xs-12 col-md-5'>
            <input type='password' class='form-control' id='<?php echo $name;?>' name='<?php echo $name;?>' placeholder='<?php if ($required){echo "Required";}else{echo "Password";}?>' <?php if (!is_null($value)) {echo "value='{$value}' ";}?>/>
            <?php if (!is_null($helpBlock)) {
            ?>
            <span class='help-block'>
                <?php echo $helpBlock;?>
            </span>
            <?php
            }
            ?>
        </div>
        <div class='col-md-3'><!-- Desktop spacing --></div>
    </div>
</div>
<?php
    }

    /**
     * Outputs a standarn styled input entry form element
     * @param String $name The name given to `$_REQUEST`
     * @param String $label Optional label for the user
     * @param String $value Optional data to prepopulate the entry with
     * @param Mixed $required Optional `true` or array of jquery.validate() properties
     * @param String $helpBlock Optional string for user helpblock
     * @return Void
     * @todo Rewrite with PHP instead of HTML
     */
    public function inputCapture ($name, $label = 'Entry', $value = null, $required = false, $helpBlock = null ) {
        if ($required){
            $this->addValidation($name, $required);
        }
?>
<div class='form-group'>
    <div class='row'>
        <div class='col-md-3'></div>
        <div class='col-xs-12 col-md-1 right-text'>
            <label class='control-label' for='<?php echo $name;?>'><?php echo $label;?>:</label>
        </div>
        <div class='col-xs-12 col-md-5'>
            <input type='text' class='form-control' id='<?php echo $name;?>' name='<?php echo $name;?>' placeholder='<?php if ($required) {echo 'Required';} else {echo $label;}?>' <?php if (!is_null($value)){echo "value='{$value}' ";}?>/>
            <?php if (!is_null($helpBlock)) {
            ?>
            <span class='help-block'>
                <?php echo $helpBlock;?>
            </span>
            <?php
            }
            ?>
        </div>
        <div class='col-md-3'></div>
    </div>
</div>
<?php
    }

    /**
     * Outputs a standarized label element to the stream
     * 
     * Keeps the format of the form, yet allows you to place a
     * label where it is needed. Any content can be label keeping 
     * the form styling.
     * @param String $label The label
     * @param String $content The content if any being labeled.
     * @return Void
     */
    public function labelContent ($label, $content = 'Default Content') {
        $id = uniqid();
        echo "<div class='form-group'>\n";
        echo "  <div class='row'>\n";
        echo "      <div class='col-md-3'></div>\n";
        echo "      <div class='col-xs-12 col-md-1 right-text'>\n";
        echo "          <label class='control-label' for='{$id}'>{$label}:</label>\n";
        echo "      </div>\n";
        echo "      <div class='col-xs-12 col-md-5'>\n";
        echo "          <span name='{$id}' id='{$id}'>{$content}</span>\n";
        echo "      </div>\n";
        echo "      <div class='col-md-3'></div>\n";
        echo "  </div>\n";
        echo "</div>\n";
    }

    /**
     * Outputs a form submittal to the stream
     * 
     * Generates the submit buttons and optional reset and cancel buttons
     * @param String $label Optional name for the submit button default is 'Submit'
     * @param Boolean $reset Optional to include a form reset button
     * @param String $cancel Optional hyperlink to use for a cancel button
     * @return Void
     */
    public function submitForm ($label = 'Submit', $reset = false, $cancel = null) {
?>
<div class='form-group'>
    <div class='row'>
        <div class='col-md-4'><!-- desktop spacing --></div>
        <div class='col-xs-12 col-md-6'>
            <button class='btn btn-lg btn-default' type='submit'><?php echo $label;?></button>&#160;
            <?php
                if ($reset) {
                    echo "<button type='reset' class='btn btn-lg btn-default'>Reset</button>&#160;";
                }
                if (!is_null($cancel)) {
                    echo "<button type='button' class='btn btn-lg btn-default' onclick='window.location=\"{$cancel}\";'>Cancel</button>";
                }
            ?>
        </div>
        <div class='col-md-2'><!-- desktop spacing --></div>
    </div>
</div>
<?php
    }

    /**
     * Outputs a radio button selection to the stream
     * 
     * Generates radio buttons in the standard style based on the `$value`
     * array. The value array should be indexed thusly: `button_label=>button_value`
     * @param String $name The name given to `$_REQUEST`
     * @param String $label The label for the user for the buttons
     * @param Array $value The array containing labels and values for the buttons
     * @param Boolean $required Optional `true` or `false` if validation is required
     * @param String $helpBlock Optional helpblock text for the user
     * @return Void
     */
    public function radioButtons ($name, $label = 'Select', Array $value = null, $required = false, $helpBlock = null) {
        if ($required) {
            $this->validate = true;
        }
        echo "<div class='form-group'>\n";
        echo "  <div class='row'>\n";
        echo "      <div class='col-md-3'><!-- Desktop spacing --></div>\n";
        echo "      <div class='col-xs-12 col-md-1 right-text'>\n";
        echo "          <label class='control-label' for='{$name}'>{$label}:</label>\n";
        echo "      </div>\n";
        echo "      <div class='col-md-5 col-xs-12'>\n";
        echo "      <label class='error' for='{$name}' generated='true'></label>\n";
        foreach($value as $lb => $val) {
            echo "          <div class='radio'>\n";
            echo "              <label><input type='radio' name='{$name}' value='{$val}' ";
            if ($required) echo "required";
            echo " />{$lb}</label>\n";
            echo "          </div>\n";
        }
        if (!is_null($helpBlock)) {
            echo "<span class='help-block'>{$helpBlock}</span>\n";
        }
        echo "</div>\n";
        echo "<div class='col-md-3'><!-- Desktop Spacing --></div>\n";
        echo "</div>\n";
        echo "</div>\n";
    }

    /**
     * Outputs a hidden form value to the stream
     * 
     * A PHP centric wat to add a hidden value to a form
     * @param String $name The name givne to `$_REQUEST`
     * @param String $value The value for the name
     * @return Void
     * @todo Rewrtie in PHP instead of HTML
     */
    public function hiddenInput ($name, $value) {
?> 
        <input type='hidden' name='<?php echo $name;?>' value='<?php echo $value;?>' />
<?php
    }

    /**
     * Adds the required jquery.validate() validation properties for the form
     * @param String $name The name of the element requiring validation.
     * @param Array $rules The jquery.validate() rules for the named element
     * @return Void
     */
    protected function addValidation ($name, $rules) {
        $this->validate = true;
        $json_array['required'] = 'true';
        if (is_array($rules)) {
            foreach($rules as $rule=>$requirement) {
                $json_array[$rule] = $requirement;
            }
        }
        $this->rules[$name] = $json_array;
    }

    /**
     * Outputs a form upload dialog entry to the stream
     * 
     * A file upload entry stylized for Bootstrap and the 
     * standard framework.
     * @param String $name The name given to `$_REQUEST`
     * @param Mixed $required Optional `true` or array of jquery.validate() properties
     * @todo rewrite for PHP instead of HTML
     */
    public function fileUpload ($name, $required = false) {
        if ($required){
            $this->addValidation($name, $required);
        }
?>
<div class='form-group'>
    <div class='row'>
        <div class='col-md-3'></div>
        <div class='col-xs-12 col-md-1 right-text'><label>File:</label></div>
        <div class='col-xs-12 col-md-5'>
            <div class='input-group'>
                <label class='input-group-btn'>
                    <span class='btn btn-info'>
                        Browse&hellip;
                        <input type='file' name='<?php echo $name;?>[]' style='display:none;' multiple <?php if ($required){echo 'required';}?>/>
                    </span>
                </label>
                <input type="text" class="form-control" readonly>
            </div>
        </div>
        <div class='col-md-3'></div>
    </div>
</div>
<?php     
    }

    /**
     * Outputs a styled form checkbox to the stream.
     * 
     * If you require a default value for your checkbox, simply call
     * `FormWidgets::hiddenInput` prior to calling this method. Use the 
     * same `$name` for the hidden input as this checkbox. Unchecked
     * checkboxes will always have the value given in the hidden input
     * `$value` parameter.
     * @param String $name The name given to `$_REQUEST`
     * @param Array $label Unindexed array of string labels, the first 
     * for the label of the section describing the checkbox, the second 
     * for the checkbox itself.
     * @param String $value The value of the element if the checkbox is checked
     * @param Mixed $required Optional `true` or array of jquery.validate() properties
     * @param String $helpBlock Optional helpblock message for the user
     * @return Void 
     */
    public function checkBox ($name, Array $label, $value, $required = false, $helpBlock = null) {
        if ($required) {
            $this->addValidation($name, $required);
        }
        echo "<div class='form-group'>\n";
        echo "  <div class='row'>\n";
        echo "      <div class='col-md-3'></div>\n";
        echo "      <div class='col-md-1 col-xs-12 right-text'>\n";
        echo "          <label class='control-label' for='{$name}'>{$label[0]}:</label>\n";
        echo "      </div>\n";
        echo "      <div class='col-md-5 col-xs-12'>\n";
        echo "          <div class='checkbox'>\n";
        echo "              <label><input type='checkbox' id='{$name}' name='{$name}' value='{$value}' />{$label[1]}</label>\n";
        echo "          </div>\n";
        echo "          <label class='error' for='{$name}' generated='true'></label>\n";
        if (!is_null($helpBlock)) {
            echo "          <span class='help-block'>{$helpBlock}</span>\n";
        }
        echo "      </div>\n";
        echo "      <div class='col-md-3'></div>\n";
        echo "  </div>\n";
        echo "</div>\n";
    }

    /**
     * Outputs a standard stylized heading to the stream
     * @param String $content The heading content
     * @return Void
     * @todo Rewrite for PHP and not HTML
     */
    public function h2 ($content) {
?>
<div class='row'>
    <div class='col-md-3'></div>
    <div class='col-md-6 col-xs-12 left-text'>
        <strong><?php echo $content;?></strong>
    </div>
    <div class='col-md-3'></div>
</div>
<?php
    }

    /**
     * Outputs a stylized select box to the stream
     * @param String $name The name given to $_REQUEST
     * @param String $label The label for the element
     * @param Array $value A mulitdimensional array in the form `[['opt_val','opt_label'],...]`
     * @param Mixed $required Optional, either true if required or array of jquery.validate() properties
     * @param String $helpBlock Optional string to output as help block.
     */
    public function selectBox ($name, $label, Array $value, $required = false, $helpBlock = null) {
        if ($required) {
            $this->addValidation($name, $required);
        }
        echo "<div class='form-group'>\n";
        echo "<div class='row'>\n";
        echo "<div class='col-md-3'></div>\n";
        echo "<div class='col-md-1 col-xs-12 right-text'>\n";
        echo "<label class='control-label' for='{$name}'>{$label}:</label>\n";
        echo "</div>\n";
        echo "<div class='col-md-5 col-xs-12'>\n";
        echo "<select class='form-control' name='{$name}' id='{$name}'>\n";
        echo "<option value='' selected='selected'></option>\n";
        foreach($value as $opt) {
            echo "<option value='{$opt[0]}'>{$opt[1]}</option>\n";
        }
        echo "</select>\n";
        echo "<label class='error' for='{$name}' generated='true'></label>\n";
        if (!is_null($helpBlock)) {
            echo "<span class='help-block'>{$helpBlock}</span>\n";
        }
        echo "</div>\n";
        echo "<div class='col-md-3'></div>\n";
        echo "</div>\n";
        echo "</div>\n";
    }
}
