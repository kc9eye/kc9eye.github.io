<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
/**
 * UserAdministrator Class Model
 * 
 * @package UData\Models\Database\Postgres
 * @link https://kc9eye.github.io/udata/UData_Database_Structure.html
 * @author Paul W. Lane
 * @license GPLv2
 */
Class UserAdministrator {
    protected $dbh;

    public $Account;
    public $Roles;
    public $Profile;

    public function __construct (PDO $dbh) {
        $this->dbh = $dbh;
    }

    public function setUser ($uid) {
        $this->Account = $this->getAccountData($uid);
        $this->Roles = $this->getRoleData($uid);
        $this->Profile = $this->getProfile($uid);
    }

    protected function getAccountData ($uid) {
        $sql = 'SELECT * FROM user_accts WHERE id = ?';
        $pntr = $this->dbh->prepare($sql);
        $pntr->execute([$uid]);
        return $pntr->fetchAll(PDO::FETCH_ASSOC)[0];
    }

    protected function getRoleData ($uid) {
        $sql = 'SELECT roles.name FROM roles
                INNER JOIN user_roles
                ON user_roles.rid = roles.id
                WHERE user_roles.uid = ?';
        $pntr = $this->dbh->prepare($sql);
        $pntr->execute([$uid]);
        $roles = [];
        while (($res=$pntr->fetch(PDO::FETCH_ASSOC))) {
            array_push($roles, $res['name']);
        }
        return $roles;
    }

    protected function getProfile ($uid) {
        $sql = 'SELECT * FROM profiles WHERE id = (SELECT pid FROM user_accts WHERE id = ?)';
        $pntr = $this->dbh->prepare($sql);
        $pntr->execute([$uid]);
        return $pntr->fetchAll(PDO::FETCH_ASSOC)[0];
    }

    public function removeRole ($role) {
        $sql = 'SELECT id FROM roles WHERE name = ?';
        $pntr = $this->dbh->prepare($sql);
        $pntr->execute([$role]);
        $rid = $pntr->fetch(PDO::FETCH_ASSOC)['id'];

        $sql = 'DELETE FROM user_roles WHERE uid = :uid AND rid = :rid';
        $pntr = $this->dbh->prepare($sql);
        if ($pntr->execute([':uid'=>$this->Account['id'],':rid'=>$rid])) {
            return true;
        }
        else {
            return false;
        }
        throw new Exception('Unknown error occurred');
    }

    public function addRole ($role) {
        $sql = 'SELECT id FROM roles WHERE name = ?';
        $pntr = $this->dbh->prepare($sql);
        $pntr->execute([$role]);
        $rid = $pntr->fetch(PDO::FETCH_ASSOC)['id'];

        $sql = 'INSERT INTO user_roles VALUES (:uid, :rid)';
        $pntr = $this->dbh->prepare($sql);
        if ($pntr->execute([':uid'=>$this->Account['id'],':rid'=>$rid])) {
            return true;
        }
        else {
            return false;
        }
        throw new Exception('Unknown error occurred');
    }

    public function getAvailableRoles ($unavailable_roles = null) {
        $sql = 'SELECT name FROM roles';
        $pntr = $this->dbh->query($sql);
        $all_roles = $pntr->fetchAll(PDO::FETCH_ASSOC);
        $roles = [];
        foreach($all_roles as $row) {
            if (! is_null($unavailable_roles)) {
                if (! in_array($row['name'], $unavailable_roles) ) {
                    array_push($roles, $row['name']);
                }
            }
            else {
                array_push($role,$row['name']);
            }
        }
        return $roles;
    }

    public function deleteAccount () {
        try {
            $pntr1 = $this->dbh->prepare('DELETE FROM user_roles WHERE uid = ?');
            $pntr2 = $this->dbh->prepare('DELETE FROM profiles WHERE id = (SELECT pid FROM user_accts WHERE id = ?)');
            $pntr3 = $this->dbh->prepare('DELETE FROM user_accts WHERE id = ?');
            $this->dbh->beginTransaction();
            $pntr1->execute([$this->Account['id']]);
            $pntr2->execute([$this->Account['id']]);
            $pntr3->execute([$this->Account['id']]);
            $this->dbh->commit();
        }
        catch (Exception $e) {
            $this->dbh->rollBack();
            return false;
        }
        return true;
    }

    public function searchUsers ($search_text) {
        $sql = "SELECT * FROM user_accts WHERE to_tsvector(username ||' '|| firstname || ' '|| lastname) @@ to_tsquery(?)";
        $search = str_replace(' ',' | ', $search_text);
        $pntr = $this->dbh->prepare($sql);
        $pntr->execute([$search]);
        return $pntr->fetchAll(PDO::FETCH_ASSOC);
    }

    public function updateProfile (Array $profile) {
        unset($profile['action']);
        $sql = 'UPDATE profiles SET 
                uid = :uid, first = :first, middle = :middle,
                last = :last, other = :other, address = :address,
                address_other = :address_other, city = :city,
                state_prov = :state_prov, postal_code = :postal_code,
                home_phone = :home_phone, cell_phone = :cell_phone,
                alt_phone = :alt_phone, alt_email = :alt_email,
                e_contact_name = :e_contact_name, e_contact_number = :e_contact_number,
                e_contact_relation = :e_contact_relation
                WHERE id = :id';
        $pntr = $this->dbh->prepare($sql);
        try {
            $pntr->execute($profile);
            return true;
        }
        catch (Exception $e) {
            $this->dbh->rollback();
            return false;
        }
    }

    public function updateAccount (Array $account) {
        try {

            $account[':newpassword'] = password_hash($account[':newpassword'],PASSWORD_DEFAULT);
            $pid = $account[':pid'];
            unset($account[':pid']);
            unset($account[':verifynew']);
            unset($account['action']);

            $sql = 'UPDATE user_accts
                    SET password = :newpassword, firstname = :firstname, lastname= :lastname, alt_email = :alt_email
                    WHERE id = :uid';
            $pntr = $this->dbh->prepare($sql);

            $sql = 'UPDATE profiles SET first = :firstname, last = :lastname, alt_email = :alt_email WHERE id = :pid';
            $pntr1 = $this->dbh->prepare($sql);

            $this->dbh->beginTransaction();
            $pntr->execute($account);

            unset($account[':newpassword']);
            unset($account[':uid']);
            $account[':pid'] = $pid;
            
            $pntr1->execute($account);
            $this->dbh->commit();
            return true;
        }
        catch (Exeption $e) {
            $this->dbh->rollback();
            throw $e;
        }
    }
}
