<?php
/* This file is part of Udata.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
/**
 * AccountCreator Class
 * 
 * @package Udata\Models\Database\Postrgres
 * @link https://kc9eye.gituhub.io/udata/UData_Database_Structure.html
 * @author Paul W. Lane
 * @license GPLv2
 */
Class AccountCreator {
    const AWAITING_VERIFICATION = 12121212;

    protected $dbh;
    protected $mailer;
    protected $root_url;

    public function __construct (PDO $dbh, Mailer $mailer, $root_url) {
        $this->dbh = $dbh;
        $this->mailer = $mailer;
        $this->root_url = $root_url;
    }

    public function createAccountToVerify ($data) {
        if (!$this->verifySingleSignUpAttempt($data['email'])) {
            return self::AWAITING_VERIFICATION;
        }
        try {
            $verify_code = bin2hex(random_bytes(32));
            $sql = 'INSERT INTO user_accts_holding VALUES (:id,:username,:password,:firstname,:lastname,:alt_email,now(),:verifycode)';
            $pntr = $this->dbh->prepare($sql);
            $insert = [
                ':id' => uniqid(),
                ':username' => $data['email'],
                ':password' => password_hash($data['password'],PASSWORD_DEFAULT),
                ':firstname' => $data['firstname'],
                ':lastname' => $data['lastname'],
                ':alt_email' => $data['altemail'],
                ':verifycode' => hash('sha256', $verify_code)
            ];

            $this->dbh->beginTransaction();
            $pntr->execute($insert);

            $body = file_get_contents(INCLUDE_ROOT.'/wwwroot/templates/email/verifyemail.html');
            $body .= '<a href="'.$this->root_url.'/user/verify?id='.urlencode($verify_code).'"><strong>Verify Email</strong></a>';
            if ($this->mailer->sendMail(['to'=>$data['email'],'subject'=>'Verify Email/Changes','body'=>$body]) !== true)
                throw new Exception("Failed to send verification mail.");            
            $this->dbh->commit();
            return true;
        }
        catch (Exception $e) {
            $this->dbh->rollBack();
            throw $e;
        }
    }

    public function verifyAccount ($data) {
        try {
            $data = hash('sha256', $data);
            $pntr = $this->dbh->prepare('SELECT * FROM user_accts_holding WHERE verify_code = ?');
            $pntr->execute([$data]);
            $user = $pntr->fetchAll(PDO::FETCH_ASSOC);
            if (count($user) != 1) {
                throw new Exception("Database corrupt, wrong number of results returned.");
            }
            elseif (!hash_equals($user[0]['verify_code'],$data)) {
                throw new Exception("Hashes not equal, possible hash timing exploit.");
            }
            elseif (!$this->copyUserData($user[0])) {
                throw new Exception("Failed to copy the users data.");
            }
            else {
                return true;
            }
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    public function checkUsername ($username) {
        $sql = 'SELECT count(*) FROM user_accts WHERE username = ?';
        $pntr = $this->dbh->prepare($sql);
        if (! $pntr->execute([$username])) {
            throw new Exception('Failed to check username status. Unknown database error');
        }
        if ($pntr->fetchAll(PDO::FETCH_ASSOC)[0]['count'] != 0) {
            return true;
        }
        else {
            return false;
        }
    }

    private function copyUserData (Array $data) {
        $pid = uniqid();
        $sql = [
            'INSERT INTO user_accts VALUES (:id,:uname,:pword,:first,:last,:alt,:date,:code,:pid)',
            'INSERT INTO profiles (id, first, last, email, alt_email) VALUES (:pid,:fname,:lname,:mail,:alt)',
            'DELETE FROM user_accts_holding WHERE id = :id'
        ];
        $inserts = [
            [
                ':id'=>$data['id'],':uname'=>$data['username'],':pword'=>$data['password'],':first'=>$data['firstname'],
                ':last'=>$data['lastname'],':alt'=>$data['alt_email'],':date'=>$data['_date'],':code'=>$data['verify_code'],
                ':pid'=>$pid
            ],
            [
                ':pid'=>$pid,':fname'=>$data['firstname'],':lname'=>$data['lastname'],':mail'=>$data['username'],':alt'=>$data['alt_email']
            ],
            [':id'=>$data['id']]
        ];
        try {
            $this->dbh->beginTransaction();
            for($cnt = 0; $cnt < count($sql); $cnt++) {
                $pntr = $this->dbh->prepare($sql[$cnt]);
                if (!$pntr->execute($inserts[$cnt])) {
                    throw new Exception($sql[$cnt].' failed!');
                }
            }
            $this->dbh->commit();
            $this->emailAdmin($data['id']);
            return true;
        }
        catch (PDOException $e) {
            $this->dbh->rollBack();
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            $this->dbh->rollBack();
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    private function emailAdmin ($uid) {
        try {
            $sql = 
                'SELECT DISTINCT username FROM user_accts WHERE id in (
                    SELECT uid FROM user_roles WHERE rid = (
                        SELECT id FROM roles WHERE name = ?
                    )
                )';
            $pntr = $this->dbh->prepare($sql);
            $pntr->execute(['Administrator']);
            $body = file_get_contents(INCLUDE_ROOT.'/wwwroot/templates/email/adminnewacct.html');
            $body .= '<a href="'.$this->root_url.'/admin/users?action=get&uid='.$uid.'"><strong>Click Here</strong></a>';
            foreach($pntr->fetchAll(PDO::FETCH_ASSOC) as $res) {
                $this->mailer->sendMail(['to'=>$res['username'],'subject'=>'New Account Created','body'=>$body]);
            }
            return true;
        }
        catch (Exception $e) {
            trigger_error($e->message,E_USER_WARNING);
            return false;
        }
    }

    private function verifySingleSignUpAttempt ($username) {
        $sql = "SELECT count(*) FROM user_accts_holding WHERE username = ?";
        try {
            $pntr = $this->dbh->prepare($sql);
            $pntr->execute([$username]);
            $res = $pntr->fetch(PDO::FETCH_ASSOC);
            if ($res['count'] > 0) {
                return false;
            }
            else {
                return true;
            }
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return null;
        }
    }
} 
