<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
/**
 * WorkCells Class Model
 * 
 * @package UData\Models\Database\Postgres
 * @link https://kc9eye.github.io/udata/UData_Database_Structure.html
 * @author Paul W. Lane
 * @license GPLv2
 */
class WorkCells {

    protected $dbh;

    public function __construct (PDO $dbh) {
        $this->dbh = $dbh;
    }

    /**
     * Adds a new work cell with the given data
     * 
     * @param Array $data The cell data given in an indexed array,
     * generally the $_REQUEST array is given with the following indexes;
     * `['cell_name'=>string,'uid'=>string,'prokey'=>string]`.
     * @return Mixed Returns true on success, false otherwise.
     * if the given description is already in use, or false on error.
     */
    public function addNewCell (Array $data) {
        $sql = 'INSERT INTO work_cell (id,cell_name,_date,uid,prokey) VALUES (:id,:cell_name,now(),:uid,:prokey)';
        $insert = [
            ':id'=>uniqid(),
            ':cell_name'=>$data['cell_name'],
            ':uid'=>$data['uid'],
            ':prokey'=>$data['prokey']
        ];
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute($insert)) throw new Exception("Insert failed: {$sql}");
            return true;
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Verifies whether or not the given cell description is unique or not.
     * 
     * @param String $description The description to check for uniqueness.
     * @return Boolean True if the description is unique, false otherwise.
     */
    public function verifyUniqueCell ($description) {
        $sql = 'SELECT count(*) FROM work_cell WHERE cell_name = ?';
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute([$description])) throw new Exception("Select failed: {$sql}");
            if ($pntr->fetch(PDO::FETCH_ASSOC)['count'] > 0) return false;
            else return true;
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Returns an array of work cells for a given product
     * 
     * @param String $key The product key to retrieve cells for
     * @return Mixed An array containing the cell data, or false on error
     */
    public function getCellsFromKey ($key) {
        $sql = 
            "SELECT id,cell_name,_date,prokey,quality,control,
             (SELECT firstname||' '||lastname as author FROM user_accts WHERE id = a.uid)
             FROM work_cell as a
             WHERE prokey = ?
            ";
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute([$key])) throw new Exception("Select failed: {$sql}");
            return $pntr->fetchAll(PDO::FETCH_ASSOC);
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Searches the work_cell table given the search string and returns the data
     * @param String $search The unmodified search string
     * @return Mixed An array (possibly empty) of data on success false otherwise
     */
    public function searchCells ($search) {
        $sql = 'SELECT * FROM work_cell WHERE search @@ to_tsquery(?)';
        $string = new SearchStringFormater();
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute([$string->formatSearchString($search)])) throw new Exception("Select failed: {$sql}");
            return $pntr->fetchAll(PDO::FETCH_ASSOC);
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Returns an array of checkpoints for the given cell ID
     * @param String $cellid The ID to reteive checkpoints for
     * @return Array An array of checkpoints associated with the cell.
     */
    public function getCheckPointsByCellID ($cellid) {
        $sql = 'SELECT * FROM quality_control WHERE cellid = ?';
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute([$cellid])) throw new Exception("Select failed: {$sql}");
            return $pntr->fetchAll(PDO::FETCH_ASSOC);
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return array();
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return array();
        }
    }

    /**
     * Removes a work cell completely along with all it's associated items
     * @param String $cellid The ID of the cell to remove.
     * @return Boolean True on success, false otherwise.
     */
    public function removeWorkCell ($cellid) {
        $sql = "DELETE FROM work_cell WHERE id = ?";
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute([$cellid])) throw new Exception("Delete failed: {$sql}");
            return true;
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(), E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Updates a work cell with given data
     * @param Array $data The data given in array in the form `['cellid'=>string id,'cell_name'=>string name,'transfer_to_product'=>string prokey]`
     * @return Boolean True on success, otherwise false.
     * @todo Implement transfer function with materials cross ref to BOM
     */
    public function updateWorkCell (Array $data) {
        $sql = 'UPDATE work_cell SET cell_name = :name,uid = :uid WHERE id = :id';
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute([':name'=>$data['cell_name'],':uid'=>$data['uid'],':id'=>$data['cellid']]))
                throw new Exception("Update failed: {$sql}");
            if (!empty($data['transfer_to_product']))
                return $this->transferWorkCell($data);
            else 
                return true;
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Tranfers a work cell from one product to another
     * @param Array $data The data regarding the transfer in the form `['cellid'=>string id,'tranfer_to product'=>string prokey]`
     * @return Boolean True on succes, false otheriwse
     * @todo Finsih this feature, currently always returns true
     */
    public function transferWorkCell (Array $data) {
        trigger_error('Someone called this method',E_USER_WARNING);
        return true;
    }

    /**
     * Adds the given tooling data to the cell
     * 
     * @param Array $data The tool data in the form `['toolid'=>string,'qty'=>string,'cellid'=>string,'uid'=>string]
     * @return Boolean True on success, false otherwise.
     */
    public function addToolingToCell (Array $data) {
        $sql = "INSERT INTO cell_tooling VALUES (:id,:cellid,:toolid,:qty,:uid,now())";
        try {
            $pntr = $this->dbh->prepare($sql);
            $insert = [
                ':id'=>uniqid(),
                ':cellid'=>$data['cellid'],
                ':toolid'=>$data['toolid'],
                ':qty'=>$data['qty'],
                ':uid'=>$data['uid']
            ];
            if (!$pntr->execute($insert)) throw new Exception("Insert failed: {$sql}");
            return true;
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }

    /**
     * Removes a row containing the data for one workcell tool
     * 
     * @param String $id The row's cell_tooling ID
     * @return Boolean True on success, false otherwise
     */
    public function removeToolingFromCell ($id) {
        $sql = "DELETE FROM cell_tooling WHERE id = ?";
        try {
            $pntr = $this->dbh->prepare($sql);
            if (!$pntr->execute([$id])) throw new Exception("Delete failed: {$sql}");
            return true;
        }
        catch (PDOException $e) {
            trigger_error($e->getMessage(), E_USER_WARNING);
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->getMessage(),E_USER_WARNING);
            return false;
        }
    }
}
