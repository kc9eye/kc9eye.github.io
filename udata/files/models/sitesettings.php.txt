<?php
/* This file is part of Udata.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
Class SiteSettings {
    
    private $dbh;

    public $CurrentSecuritySettings;
    public $CurrentRoles;
    public $CurrentPermissions;
    
    public function __construct (PDO $dbh) {
        $this->dbh = $dbh;
        $this->CurrentSecuritySettings = $this->getCurrentSettings();
        $this->CurrentRoles = $this->dbh->query('SELECT * FROM roles')->fetchAll(PDO::FETCH_ASSOC);
        $this->CurrentPermissions = $this->dbh->query('SELECT * FROM perms')->fetchAll(PDO::FETCH_ASSOC);
    }

    protected function getCurrentSettings () {
        $roles_pntr = $this->dbh->query('SELECT * FROM roles');
        $roles = [];
        $sql = 'SELECT perms.id,perms.name FROM perms
                INNER JOIN role_perms 
                ON role_perms.pid = perms.id
                WHERE role_perms.rid = ?';
        $perms_pntr = $this->dbh->prepare($sql);
        while (($res = $roles_pntr->fetch(PDO::FETCH_ASSOC))) {
            $perms_pntr->execute([$res['id']]);
            array_push($roles, ['role'=>$res,'perms'=>$perms_pntr->fetchAll(PDO::FETCH_ASSOC)]);
        }
        return $roles;
    }

    public function roleHasPermission ($rid, $pid) {
        foreach($this->CurrentSecuritySettings as $setting) {
            if ($setting['role']['id'] == $rid) {
                foreach($setting['perms'] as $perm) {
                    if ($perm['id'] == $pid) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public function deleteRole ($rid) {
        try {
            $pntr1 = $this->dbh->prepare('DELETE FROM role_perms WHERE rid = ?');
            $pntr2 = $this->dbh->prepare('DELETE FROM roles WHERE id = ?');
            $this->dbh->beginTransaction();
            $pntr1->execute([$rid]);
            $pntr2->execute([$rid]);
            $this->dbh->commit();
            return true;
        }
        catch (Exception $e) {
            $this->dbh->rollback();
            throw $e;
        }
        return false;
    }

    public function removePermissionFromRole ($rid, $pid) {
        $sql = 'DELETE FROM role_perms WHERE rid = :rid and pid = :pid';
        $pntr = $this->dbh->prepare($sql);
        if ($pntr->execute([':rid'=>$rid,':pid'=>$pid])) {
            return true;
        }
        return false;
    }

    public function addPermissionToRole ($rid, $pid) {
        $sql = 'INSERT INTO role_perms (rid,pid) VALUES (:rid,:pid)';
        $pntr = $this->dbh->prepare($sql);
        if ($pntr->execute([':rid'=>$rid,':pid'=>$pid])) {
            return true;
        }
        return false;
    }

    public function addNewRole ($role) {
        $sql = 'INSERT INTO roles (id,name) VALUES (:id,:name)';
        $pntr= $this->dbh->prepare($sql);
        if ($pntr->execute([':id'=>uniqid(),':name'=>$role])) {
            return true;
        }
        return false;
    }

    public function addNewPermission ($permission) {
        $sql = 'INSERT INTO perms (id,name) VALUES (:id,:name)';
        $pntr = $this->dbh->prepare($sql);
        if ($pntr->execute([':id'=>uniqid(),':name'=>$permission])) {
            return true;
        }
        return false;
    }

    public function deletePermission ($id) {
        try {
            $pntr1 = $this->dbh->prepare('DELETE FROM role_perms WHERE pid = ?');
            $pntr2 = $this->dbh->prepare('DELETE FROM perms WHERE id = ?');
            $this->dbh->beginTransaction();
            $pntr1->execute([$id]);
            $pntr2->execute([$id]);
            $this->dbh->commit();
            return true;
        }
        catch (Exception $e) {
            $this->dbh->rollback();
            throw $e;
        }
    }
}
