<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
class DocumentViewer extends ViewMaker {
    const APPROVED = 'approved';
    const SEEKING = 'seeking_approval';
    const OBSOLETE = 'obsolete';
    const EDITING = 'in_edition';
    const EDIT_ACCESS_NAME = 'edit';
    const APPROVE_ACCESS_NAME = 'approve';

    protected $dbh;
    protected $mailer;
    protected $docName;
    protected $rights;
    protected $states;
    protected $mailperms;

    public $docURL;
    public $approved;
    public $seeking;
    public $access;

    public function __construct (PDO $dbh, Security $security, Mailer $mailer, Array $config) {
        $this->dbh = $dbh;
        $this->mailer = $mailer;
        $this->rights = 0;
        parent::__construct($security, $config);
    }

    private function setAccessRights () {
        if (!empty($this->access[self::EDIT_ACCESS_NAME])) {
            foreach($this->access[self::EDIT_ACCESS_NAME] as $perm) {
                if ($this->security->userHasPermission($perm)) {
                    $this->rights = 1;
                }
                elseif ($this->security->userHasRole($perm)) {
                    $this->rights = 1;
                }
            }
        }
        if (!empty($this->access[self::APPROVE_ACCESS_NAME])) {
            foreach($this->access[self::APPROVE_ACCESS_NAME] as $perm) {
                if ($this->security->userHasPermission($perm)) {
                    $this->rights = 2;
                }
                elseif ($this->security->userHasRole($perm)) {
                    $this->rights = 2;
                }
            }
        }
        if ($this->isDocumentOwner()) {
            $this->rights = 2;
        }
    }

    public function setDocument ($name) {
        $this->docName = $name;
        $this->setAccessRights();
        try {
            $sql = 'SELECT id, state FROM documents WHERE name = ?';
            $pntr = $this->dbh->prepare($sql);
            $pntr->execute([$name]);
            $this->states = $pntr->fetchAll(PDO::FETCH_ASSOC);
            foreach($this->states as $doc) {
                if ($doc['state'] == self::APPROVED) {
                    $this->approved = $doc['id'];
                }
                elseif ($doc['state'] == self::SEEKING) {
                    $this->seeking = $doc['id'];
                } 
            }
        }
        catch (PDOException $e) {
            throw new Exception($e->message);
        }
    }

    protected function getDocument ($id) {
        try {
            $sql = 'SELECT * FROM documents WHERE id = ?';
            $pntr = $this->dbh->prepare($sql);
            $pntr->execute([$id]);
            $doc = $pntr->fetch(PDO::FETCH_ASSOC);
            return $doc;
        }
        catch (PDOException $e) {
            throw $e;
        }
    }

    public function displayDoc($submenu = null) {
        $this->ViewData['pagetitle'] = $this->docName;
        $document = $this->getDocument($this->approved);
        $this->header();
        if (!is_null($submenu)) {
            $this->sideDropDownMenu($submenu);
        }
        echo "<div>\n";
        if ($this->rights >= 1) {
            echo "<a href='{$this->docURL}?action=edit' class='btn btn-info' role='button'>Edit Document</a>";
        }
        if ($this->rights == 2) {
            foreach($this->states as $doc) {
                if ($doc['state'] == self::SEEKING) {
                    echo "&#160;<a href='{$this->docURL}?action=approve' class='btn btn-info' role='button'>See Pending Changes</a>";
                }
            }
        }
        echo "<div class='well'><span class='small'>Approved on: {$document['a_date']}<br />{$document['body']}</div>";
        echo "</div>\n";
        $this->addscrollTopBtn();
        $this->footer();
    }

    public function editDisplay ($submenu) {
        if ($this->rights < 1) {return false;}
        $this->ViewData['pagetitle'] = 'Editing:'.$this->docName;
        $document = $this->getDocument($this->approved);
        $this->header();
        if (!is_null($submenu)) {
            $this->sideDropDownMenu($submenu);
        }
        echo "<form method='post'>
            <input type='hidden' name='action' value='submit' />
            <input type='hidden' name=':oid' value='{$this->security->secureUserID}' />
            <input type='hidden' name=':name' value='{$this->docName}' />
            <div class='form-group'><textarea class='form-control' name=':body' required>{$document['body']}</textarea>
            <button type='submit' class='btn btn-danger form-control'>Submit for Approval</button></div>
            </form>";
        $this->footer([
            'https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/jquery.validate.min.js',
            'https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/additional-methods.min.js',
            $this->PageData['approot'].'/third-party/tinymce/tinymce.min.js',
            $this->PageData['wwwroot'].'/scripts/docedit.js'
        ]);
        return true;
    }

    public function approveDisplay ($submenu) {
        if ($this->rights != 2) {return false;}
        $document = $this->getDocument($this->seeking);
        $this->header();
        if (!is_null($submenu)) {
            $this->sideDropDownMenu($submenu);
        }
        echo "<form method='post'>
                <div class='form-group'>
                    <input type='hidden' name='action' value='submitapproval' />
                    <input type='hidden' name=':name' value='{$this->docName}' />
                    <input type='hidden' name=':aid' value='{$this->security->secureUserID}' />
                    <input type='hidden' name=':id' value='{$this->seeking}' />
                    <textarea name=':body' required>{$document['body']}</textarea>
                    <label for='pass'>Password:
                        <input class='form-contorl' id='pass' type='password' name=':password' placeholder='Required for Approval' required/>
                    </label>                    
                    <button type='submit' class='btn btn-success'>Approve Document</button>&#160;
                    <a href='{$this->docURL}?action=reject&id={$this->seeking}' class='btn btn-danger' role='button'>
                        Reject
                    </a>
                </div>
            </form>";
        $this->footer([
            'https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/jquery.validate.min.js',
            'https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/additional-methods.min.js',
            $this->PageData['approot'].'/third-party/tinymce/tinymce.min.js',
            $this->PageData['wwwroot'].'/scripts/docedit.js'
        ]);
        return true;
    }

    public function submitForApproval ($data) {
        if ($this->rights == 0) {return false;}
        try {
            $sql = 'INSERT INTO documents (id,name,state,body,oid) VALUES (:id,:name,:state,:body,:oid)';
            unset($data['action']);
            $data[':id'] = uniqid();
            $data[':state'] = self::SEEKING;
            $pntr = $this->dbh->prepare($sql);
            $this->dbh->beginTransaction();
            $pntr->execute($data);
            $this->emailReview($data);
            $this->dbh->commit();
            return true;
        }
        catch(PDOException $e) {
            trigger_error($e->message,E_USER_WARNING);
            $this->dbh->rollback();
            return false;
        }
        catch (Exception $e) {
            trigger_error($e->message,E_USER_WARNING);
            $this->dbh->rollback();
            return false;
        }
    }

    public function emailReview ($data) {
        try {
            $body = file_get_contents(INCLUDE_ROOT.'/wwwroot/templates/email/docreview.html');
            $body .= "<a href='{$this->docURL}?action=approve&id={$data[':id']}'><strong>{$data[':name']}</strong></a>";
            foreach($this->access[self::APPROVE_ACCESS_NAME] as $perm) {
                foreach($this->security->getUsersByPerm($perm) as $reviewer) {
                    $this->mailer->sendMail(['to'=>$reviewer['username'],'subject'=>'Pending Document Change','body'=>$body]);
                }
            }
            return true;
        }
        catch (Exception $e) {
            trigger_error($e->message,E_USER_WARNING);
            return false;
        }
    }

    public function approvalGranted ($data) {
        if ($this->rights != 2) {return false;}
        try {
            $sql = 'SELECT password FROM user_accts WHERE id = ?';
            $pntr = $this->dbh->prepare($sql);
            $pntr->execute([$data[':aid']]);
            $pass = $pntr->fetch(PDO::FETCH_ASSOC);
            $this->dbh->beginTransaction();
            if (password_verify($data[':password'],$pass['password'])) {
                $sql = 'UPDATE documents SET state = :state WHERE id = :id';
                $pntr = $this->dbh->prepare($sql);
                $pntr->execute([':state'=>self::OBSOLETE,':id'=>$this->approved]);

                $sql = 'UPDATE documents SET state = :state, aid = :aid, a_date = now() WHERE id = :id';
                $pntr = $this->dbh->prepare($sql);
                $pntr->execute([':state'=>self::APPROVED,':aid'=>$data[':aid'],':id'=>$data[':id']]);
                $this->dbh->commit();
                return true;
            }
            else {
                return false;
            }
        }
        catch (Exception $e) {
            trigger_error($e->message, E_USER_WARNING);
            return false;
        }
    }

    public function rollBack ($id) {
        if ($this->rights != 2) {return false;}
        try {
            $sql = 'DELETE FROM documents WHERE id = ?';
            $pntr = $this->dbh->prepare($sql);
            $pntr->execute([$id]);
            return true;
        }
        catch (Exception $e) {
            trigger_error($e->message,E_USER_WARNING);
            return false;
        }
    }

    private function isDocumentOwner () {
        try {
            $sql = 'SELECT oid FROM documents WHERE name = :name AND state = :state';
            $pntr = $this->dbh->prepare($sql);
            $pntr->execute([':name'=>$this->docName,':state'=>self::APPROVED]);
            $oid = $pntr->fetch(PDO::FETCH_ASSOC)['oid'];
            if ($this->security->secureUserID == $oid) {
                return true;
            }
        }
        catch (PDOException $e) {
            return false;
        }
        return false;
    }
}
