<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

 /**
  * Main server instance. Is the first object instantiated from *lib/init.php*
  *
  * This class handles the spool of the PDO, Security model, and other methods
  * that make it easier to construct concise controllers.
  *
  * @param array $config Should contain an array for comfiguration options. See *etc/config.php*
  * 
  * @return Instance
  */
Class Instance {
    
    /**
     * Contains the publicly accessible configuraiton array
     * 
     * @return Array
     */
    public $config;

    /**
     * Contains the publicly accessible PDO object
     * 
     * @return PDO
     */
    public $pdo;

    /**
     * Contains the publicly accessible security object
     * 
     * @return Security
     */
    public $security;

    /**
     * Contains the publicly accessible mailer object
     * 
     * @return Mailer
     */
    public $mailer;

    /**
     * The class constructor
     * 
     * Creates the most needed objects for models and controllers and stores them 
     * in properties
     * 
     * @param Array $config Should be the configuration array. See *etc/config.php*
     * 
     * @return Instance
     * 
     * @author Paul W. Lane
     */
    public function __construct ($config) {
        $this->config = $config;
        $this->pdo = new PDO($this->config['dbpdo'], $this->config['dbuser'], $this->config['dbpass']);
        $this->security = $this->getAuthority($this->pdo);
        $this->mailer = new Mailer($this->config);
    }

    /**
     * Instantiates the ViewMaker object and outputs UI controller interface stub.
     * 
     * Initializes the ViewMaker object with all the required objects and outputs
     * the initial framework UI interface. It is up to you to end that interface stub
     * with a `$myobjectvar->footer()` method call. This method also returns the
     * ViewMaker object. It should be called thusly: `$view = $server->getViewer('My Page Title')`.
     * 
     * @param $pagetitle Optional pagetitle for the browser page. Defaults to configuration option
     * `$config['company-name']`.
     * 
     * @return ViewMaker
     * 
     * @author Paul W. Lane
     */
    public function getViewer ($pagetitle = null) {
        $view = new ViewMaker($this->security, $this->config);
        $view->ViewData['pagetitle'] = is_null($pagetitle) ? $this->config['company-name'] : $pagetitle;
        $view->header();
        return $view;
    }
    
    /**
     * Outputs an entire HTML interface with debugging information.
     * 
     * This method will ouput string given encapsulated in a scrollable `<pre>`
     * section, wrapped in an entire standard framework interface to the output stream.
     * It is intended to be used for debugging controllers.
     * 
     * @param String $debug Anything passed in this variable as string will be output
     * to the stream.
     * 
     * @return void
     * 
     * @author Paul W. Lane
     */
    public function getDebugViewer ($debug) {
        $buff = ob_get_contents();
        ob_clean();
        $this->userMustHaveRole('Administrator');
        $view = new ViewMaker($this->security,$this->config);
        $view->ViewData['pagetitle'] = 'DEBUG CONTENT';
        $view->header();
        echo "<pre class='scrollable'>\n";
        echo "Your debug info:\n----------\n{$debug}\n---------\n\n";
        echo "Session info\n--------\n".print_r($_SESSION, true)."\n----------\n\n";
        echo "Server Variables\n-----------\n".print_r($_SESSION, true)."\n-----------\n\n";
        echo "</pre>\n";
        $view->footer();
        die();
    }

    /**
     * Is called by the constructor to instantiate the *Security* model and object
     * 
     * This method should not be called by any classes extending this one. Instead
     * extending classes should instantiated this class by using `parent::_construct($config);`
     * 
     * @return Security
     * 
     * @author Paul W. Lane
     */
    private function getAuthority () {
        $security = new Security($this->pdo);
        if ($security->checkPersistentLogOn()) {
            $security->setUser();
            $_SESSION['uid'] = $security->secureUserID;
        }
        elseif (isset($_SESSION['uid'])) {
            $security->secureUserID = $_SESSION['uid'];
            $security->setUser();
        }
        return $security;
    }

    /**
     * Outputs a message to the stream for the end user wrapped in an interface.
     * 
     * Outputs a standard interface message the end user via the `$message` paramater.
     * The interface can be styled in one of two ways using the `$success` parameter. The interface 
     * will also display a click button that will redirect the user to any hyperlink given
     * using the `$target_link` parameter.
     * 
     * @param String $message The message to be displayed to the user.
     * @param Boolean $success Optional, defaults to `FALSE` indicating a failure styling.
     * @param String $target_link Optional, hyperlink to redirect the user to,
     * defaults to `$config['application-root']`.
     * 
     * @author Paul W. Lane
     */
    public function newEndUserDialog ($message, $success = DIALOG_FAILURE, $target_link = null) {
        $target_link = !is_null($target_link) ? $target_link : $this->config['application-root'];
        $view = $this->getViewer('User Dialog');
?>
    <div class='col-md-3'></div>
    <div class='col-xs-12 col-md-6'>
        <div class='well well-lg'>
            <h2><?php if ($success) {echo 'Success';} else {echo 'Failure';}?>!</h2>
            <p class='<?php if ($success) {echo 'bg-success';}else{echo 'bg-danger';}?>'><?php echo $message;?></p>
            <button type='button' class='btn <?php if ($success){echo "btn-success";}else{echo "btn-danger";}?>' onclick='window.open("<?php echo $target_link;?>","_self")'>Close</button>
        </div>
    </div>
    <div class='col-md-3'></div>
<?php
    $view->footer();
    die();
    }

    public function mustBeValidUser () {
        if (is_null($this->security->user)) {
            $this->notAuthorized();
        }
        else {
            return true;
        }
    }

    public function userMustHavePermission ($perm) {
        if ($this->checkPermission($perm)) {
            return true;
        }
        elseif ($this->checkPermission('adminAll')) {
            return true;
        }
        else {
            $this->notAuthorized();
        }
    }

    public function userMustHaveRole ($role) {
        if ($this->security->userHasRole($role)) {
            return true;
        }
        elseif ($this->security->userHasRole('Administrator')) {
            return true;
        }
        else {
            $this->notAuthorized();
        }
    }

    public function checkPermission ($permission) {
        if (is_null($this->security->user)) {
           return false;
        }
        elseif ($this->security->userHasPermission('adminAll')) {
            return true;
        }
        elseif ($this->security->userHasPermission($permission)) {
            return true;
        }
        else {
            return false;
        }
    }

    public function checkPermsArray (Array $perms, $and = false) {
        $aggregate = 0;
        foreach ($perms as $permission) {
            if ($this->checkPermission($permission)) {
                $aggregate++;
            }
        }
        if ($and) {
            if (count($perms) == $aggregate) {
                return true;
            }
            else {
                return false;
            }
        }
        elseif ($aggregate >= 1) {
            return true;
        }
        else {
            return false;
        }
        return false;
    }
    
    public function notAuthorized () {
        $buff = ob_get_contents();
        ob_clean();
        $this->loginRedirectHere();
        $view = $this->getViewer("Not Authorized!");
        ?>
        <div class="row">
            <div class='col-md-3'></div>
            <div class="col-xs-12 col-md-6">
                <img src='<?php echo $view->PageData['wwwroot'];?>/images/403.jpg' class='img-responsive' />
            </div>
            <div class='col-md-3'></div>
        </div>
        <?php
        $view->footer();
        die();
    }

    public function pageNotFound () {
        $buff = ob_get_contents();
        ob_clean();
        $view = $this->getViewer('NOT FOUND');
        ?>
        <div class='row' style='background-color:#ccb999;'>
            <div class='col-xs-12 center-text'>
                <img class='img-responsive' src='<?php echo $view->PageData['wwwroot'];?>/images/404.jpg' />
            </div>
        </div>
        <?php
        $view->footer();
        die();
    }

    public function redirect ($link, $offsite = false) {
        $buff = ob_get_contents();
        ob_clean();
        if ($offsite) {
            header('Location: '.$link);
        }
        elseif (empty($this->config['application-root'])) {
            header('Location: /'.$link);
        }
        else {
            header('Location: '.$this->config['application-root'].$link);
        }
        die();
    }

    public function loginRedirectHere ($url = null) {
        if (is_null($url)) {
            $replace = explode('/',$this->config['application-root']);
            array_push($replace,'//');
            $uri = '/'.str_replace($replace,'',$_SERVER['REQUEST_URI']);
        }
        else {
            $uri = $url;
        }
        $_SESSION['login-redirect'] = $uri;
        return true;
    }
}

