<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
class FileUpload {

    public $multiple;
    public $files;

    public function __construct ($input_name) {
        $this->files = [];
        if (is_array($_FILES[$input_name]['error'])) {
            $this->multiple = true;
            $this->multipleFiles($input_name);
        }
        else {
            $this->multiple = false;
            $this->handleFile($input_name);
        }
        return $this;
    }

    protected function multipleFiles($input_name) {
        $files = $_FILES[$input_name];
        foreach($files['error'] as $key => $value) {
            if ($value != \UPLOAD_ERR_OK) {
                throw new UploadException($value);
            }
            $push = [
                'name'=> $files['name'][$key],
                'tmp_name'=>$files['tmp_name'][$key],
                'type'=>$files['type'][$key],
                'size'=>$files['size'][$key],
                'error'=>$value
            ];
            array_push($this->files,$push);
        }
    }

    protected function handleFile($input_name) {
        $files = $_FILES[$input_name];
        if ($files['error'] != \UPLOAD_ERR_OK) {
            throw new UploadException($files['error']);
        }
        $push = [
            'name'=>$files['name'],
            'tmp_name'=>$files['tmp_name'],
            'type'=>$files['type'],
            'size'=>$files['size'],
            'error'=>$files['error']
        ];
        array_push($this->files,$push);
    }
}

class UploadException extends Exception {

    public function __construct ($code) {
        $message = $this->codeToMessage($code);
        parent::__construct($message, $code);
    }

    private function codeToMessage($code)
    {
        switch ($code) {
            case UPLOAD_ERR_INI_SIZE:
                $message = "The uploaded file exceeds the upload_max_filesize config directive";
                break;
            case UPLOAD_ERR_FORM_SIZE:
                $message = "The uploaded file exceeds the MAX_FILE_SIZE form directive";
                break;
            case UPLOAD_ERR_PARTIAL:
                $message = "The uploaded file was only partially uploaded";
                break;
            case UPLOAD_ERR_NO_FILE:
                $message = "No file was uploaded";
                break;
            case UPLOAD_ERR_NO_TMP_DIR:
                $message = "Missing a temporary folder";
                break;
            case UPLOAD_ERR_CANT_WRITE:
                $message = "Failed to write file to disk";
                break;
            case UPLOAD_ERR_EXTENSION:
                $message = "File upload stopped by extension";
                break;
            default:
                $message = "Unknown upload error";
                break;
        }
        return $message;
    }
}
