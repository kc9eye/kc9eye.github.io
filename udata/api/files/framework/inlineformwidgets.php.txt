<?php
/* This file is part of UData.
 * Copyright (C) 2018 Paul W. Lane <kc9eye@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
/**
 * Adds inline form elements to the standard FormWidgets
 * @see FormWidgets
 * @author Paul W. Lane
 * @package UData\Framework\UI\Bootstrap3
 */
class InlineFormWidgets extends FormWidgets {
    
    /**
     * Class constructor
     * @param String $scripts The base URL path to script files
     * like the jquery.validate() plugin
     * @return InlineFromWidgets
     */
    public function __construct ($scripts) {
        parent::__construct($scripts);
    }

    /**
     * Outputs a new inline form element to the stream
     * @param String $header Optional header for the form.
     * @param String $uri Optional URI to a handler for the form
     * @param String $method Optional method for submitting, 'post' or 'get'. Default is 'post'
     * @param String $id Optional form ID, auto generated if not given.
     * @return Void
     */
    public function newInlineForm ($header = null, $uri = null, $method = 'post', $id = null) {
        $this->formid = is_null($id) ? uniqid() : $id;
        if (!is_null($header)) {echo "<h3>{$header}</h3>\n";}
        echo "<form class='form-inline' method='{$method}' ";
        if (!is_null($uri)) {echo "action='{$uri}' ";}
        echo "id='{$this->formid}'>\n";
    }

    /**
     * Outputs a new inline multipart form to the stream
     * 
     * Required for file uploads.
     * @param String $header Optional header for the form.
     * @param String $uri Optional URI for a handler of the form
     * @param String $id Optional ID for the form, autogenerated if not given.
     * @return Void
     */
    public function newInlineMultipartForm ($header = null, $uri = null, $id = null) {
        $this->formid = is_null($id) ? uniqid() : $id;
        if (!is_null($header)) {echo "<h3>{$header}</h3>";}
        echo "<form class='form-inline' method='post' enctype='multipart/form-data' id='{$this->formid}' ";
        if (!is_null($uri)) {echo "action='{$uri}' ";}
        echo "/>\n";
    }

    /**
     * Outputs an inline text entry to the stream.
     * @param String $name The name given to `$_REQUEST`
     * @param String $label Optional label for the entry
     * @param String $value Optional value to populate the entry with
     * @param Mixed $required Optional `true` or an array of jquery.validate() properties
     * @param String $helpBlock Optional user help text
     * @return Void
     */
    public function inlineInputCapture ($name, $label = 'Data Input', $value = null, $required = false, $helpBlock = null) {
        echo "<div class='form-group'>\n";
        echo "<label for='{$name}'>{$label}:</label>\n";
        echo "<input type='text' class='form-control' name='{$name}' id='{$name}' ";
        if (!is_null($value)) {echo "value='{$value}' ";}
        if ($required) {
            echo "placeholder='Required' ";
            $this->addValidation($name,$required);
        }
        echo "/>\n";
        echo "</div>\n";
    }

    /**
     * Outputs an inline file upload entry to the stream
     * @param String $name The name given to `$_REQUEST`
     * @param Boolean $multiple Whether or not this entry accepts multiple files
     * @param Mixed $required Optional `true` or array of jquery.validate() properties
     * @return Void
     */
    public function inlineFileUpload ($name, $multiple = false, $required = false) {
        echo "<div class='form-group'>\n";
        echo "<div class='input-group'>\n";
        echo "<label class='input-group-btn'>\n";
        echo "<span class='btn btn-info'>Browse&hellip;";
        echo "<input type='file' style='display:none' ";
        if ($multiple) {echo "name='{$name}[]' ";}
        else {echo "name='{$name}' ";}
        if ($required) {echo "placeholder='Required' ";}
        if ($multiple) {echo "multiple /></span>\n";}
        else {echo "/></span>\n";}
        echo "</label>\n";
        echo "<input type='text' class='form-control' readonly />\n";
        echo "</div>\n";
        echo "</div>\n";
    }

    /**
     * Outputs an inline form submit button to the stream
     * @param String $label An optional label for the button
     * @param Boolean $reset An optional switch to also output a reset button
     * @param String $cancel An optional full length hyperlink to disregard the form
     * @return Void
     */
    public function inlineSubmit ($label = 'Submit',$reset = false, $cancel = null) {
        echo "<button class='btn btn-default' type='submit'>{$label}</button>\n";
        if ($reset) echo "&#160;<button class='btn btn-default' type='reset'>Reset</button>\n";
        if (!is_null($cancel)) echo "&#160;<a href='{$cancel}' class='btn btn-default'>Cancel</a>\n";
    }

    /**
     * Outputs the end of the form to the stream.
     * @return Void
     */
    public function endInlineForm () {
        if ($this->validate) {
            echo "</form>\n";
            echo "<script src='https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/jquery.validate.min.js'></script>\n";
            echo "<script src='https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/additional-methods.min.js'></script>\n";
            echo "<script src='{$this->scripts}/btstrapfileinputhack.js'></script>\n";
            echo "<script>\n";
            echo "$(document).ready(function(){ $('#{$this->formid}').validate(".str_replace('"','',json_encode(['rules'=>$this->rules],JSON_FORCE_OBJECT)).");});";
            echo "</script>\n";
        }
        else {
            echo "</form>\n";
        }
    }

    /**
     * Adds an inline checkbox element to the stream.
     * 
     * Outputs to the stream an inline stylized checkbox.
     * @param String $name The name given to $_REQUEST
     * @param String $label The user seen label to the checkbox
     * @param String $value The value of the checkbox if checked
     * @param Mixed $required Optional `true` or array of jquery.validate() properties if required
     * @return Void
     */
    public function inlineCheckbox ($name, $label, $value, $required = false) {
        echo "<div class='checkbox'>\n";
        echo "<label>\n";
        echo "<input type='checkbox' name='{$name}' value='{$value}' />\n";
        echo "{$label}</label>\n";
        echo "</div>";
        if ($required) {
            $this->addValidation($name, $required);
            echo "<label class='error' for='{$name}' generated='true'></label>\n";
        }
    }

    /**
     * Outputs a full page width search bar to the stream
     * 
     * This method will output a search bar the will extend the 
     * full width of the element it is called within.
     * @param String $name The name given to $_REQUEST
     * @param String $label Optional placeholder label for the bar, default is 'Search'
     * @param String $value Optional value to intialize in the bar
     * @param Mixed $required Optional `true` or array of jquery.validate() properties if required
     * @return Void
     */
    public function fullPageSearchBar($name, $label = 'Search', $value = null, $required = false, $helpBlock = null) {
        echo "<form>\n";
        echo "<div class='input-group'>\n";
        echo "<input type='text' class='form-control' placeholder='{$label}' name='{$name}' >\n";
        echo "<div class='input-group-btn'>\n";
        echo "<button class='btn btn-default' type='submit'>\n";
        echo "<span class='glyphicon glyphicon-search'></span>\n";
        echo "</button>\n";
        echo "</div>\n";
        echo "</div>\n";
        if (!is_null($helpBlock)) echo "<span class='help-block'>{$helpBlock}</span>\n";
        if ($required) {
            $this->addValidation($name,$required);
            echo "<label class='error' for='{$name}' generated='true'></label>\n";
        }
        echo "</form>\n";
    }

    /**
     * Outputs an inline button group to the stream
     * 
     * The array given should be in the form
     * `['btn_label'=>'onclick_action',...]`.
     * You do not typically need to call `InlineFormWidgets::newInlineForm()`
     * to use this method. However, wif the clickable actions are functions
     * for a form you will have to.
     * @param Array $btns An array of the form `['btn_label'=>'onclick_action']`
     * @return Void
     */
    public function inlineButtonGroup (Array $btns) {
        echo "<div class='btn-group'>\n";
        foreach($btns as $label=>$action) {
            echo "<button type='button' class='btn btn-info' onclick='{$action}'>{$label}</button>\n";
        }
        echo "</div>\n";
    }

       /**
     * Outputs an inline stylized select box to the stream
     * @param String $name The name given to $_REQUEST
     * @param String $label The label for the element
     * @param Array $value A mulitdimensional array in the form `[['opt_val','opt_label'],...]`
     * @param Mixed $required Optional, either true if required or array of jquery.validate() properties
     * @param String $helpBlock Optional string to output as help block.
     */
    public function inlineSelectBox ($name, $label, Array $value, $required = false, $helpBlock = null) {
        if ($required) {
            $this->addValidation($name, $required);
        }
        echo "<div class='form-group'>\n";
        echo "<label class='control-label' for='{$name}'>{$label}:</label>\n";
        echo "<select class='form-control' name='{$name}' id='{$name}'>\n";
        echo "<option value='' selected='selected'></option>\n";
        foreach($value as $opt) {
            echo "<option value='{$opt[0]}'>{$opt[1]}</option>\n";
        }
        echo "</select>\n";
        echo "<label class='error' for='{$name}' generated='true'></label>\n";
        if (!is_null($helpBlock)) {
            echo "<span class='help-block'>{$helpBlock}</span>\n";
        }
        echo "</div>\n";
    }

     /**
     * Outputs an inline formated textarea to the stream
     * 
     * @param String $name The `$_REQUEST` name given to the handler.
     * @param String $label The UI display name for the widget.
     * @param String $value Optional pre-inserted value.
     * @param Mixed $required Optionally either true or an indexed array of jQuery.validate() options
     * @param String $helpBlock Optional string of help text for the widget
     * @param Boolean $wysiwyg Optional boolean to make the textarea use the tiny editor.
     * @return Void Output is directed to the stream, and this widget returns no value
     */
    public function inlineTextArea ($name, $label = null, $value = '', $required = false, $helpBlock = null, $wysiwyg = false) {
        $this->wysiwyg = $wysiwyg;
        if ($required) {
            $this->addValidation($name, $required);
        }
        $id = uniqid();
        echo "<div class='form-group'>\n";
        if (!is_null($label))
            echo "<label class='control-label' for='{$name}'>{$label}:</label>\n";
        echo "<textarea class='form-control' name='{$name}' id='{$id}'>{$value}</textarea>\n";
        if (!is_null($helpBlock)) {
            echo "<span class='help-block'>{$helpBlock}</span>\n";
        }
        echo "</div>\n";      
    }
}
